
Question Mark Advanced.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000a0a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015c  00800060  00000a0a  00000a9e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  008001bc  008001bc  00000bfa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000bfa  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000190  00000000  00000000  00000c2a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001869  00000000  00000000  00000dba  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000aff  00000000  00000000  00002623  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000093a  00000000  00000000  00003122  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c8  00000000  00000000  00003a5c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005a0  00000000  00000000  00003d24  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000105e  00000000  00000000  000042c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000118  00000000  00000000  00005322  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e0       	ldi	r30, 0x0A	; 10
  68:	fa e0       	ldi	r31, 0x0A	; 10
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 3b       	cpi	r26, 0xBC	; 188
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ac eb       	ldi	r26, 0xBC	; 188
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 3c       	cpi	r26, 0xC1	; 193
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 60 03 	call	0x6c0	; 0x6c0 <main>
  8a:	0c 94 03 05 	jmp	0xa06	; 0xa06 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <BTN_Init>:
	
	for(LoopIndex = 0; LoopIndex <BTN_MAX_NUM; LoopIndex++)
	{
		BtnMask = BTN_ConfigData[LoopIndex].BtnMask;
		BtnPort = BTN_ConfigData[LoopIndex].BtnPort;
		DIO_InitPortDirection(BtnPort,0,BtnMask);
  92:	40 91 65 00 	lds	r20, 0x0065
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	80 91 64 00 	lds	r24, 0x0064
  9c:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
		BTN_PrevState[LoopIndex] = STATE_OPEN;
  a0:	10 92 bc 01 	sts	0x01BC, r1
  a4:	08 95       	ret

000000a6 <Btn_Read>:
	}
}


u8 Btn_Read(u8 BtnId)
{
  a6:	1f 93       	push	r17
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	u8 PrevState;
	u8 BtnPort;
	u8 BtnMask;
	u8 PinData;
	u8 RetVal;
	PrevState = BTN_PrevState[BtnId];
  ac:	c8 2f       	mov	r28, r24
  ae:	d0 e0       	ldi	r29, 0x00	; 0
  b0:	fe 01       	movw	r30, r28
  b2:	e4 54       	subi	r30, 0x44	; 68
  b4:	fe 4f       	sbci	r31, 0xFE	; 254
  b6:	10 81       	ld	r17, Z
	BtnPort = BTN_ConfigData[BtnId].BtnPort;
	BtnMask = BTN_ConfigData[BtnId].BtnMask;
  b8:	ce 01       	movw	r24, r28
  ba:	88 0f       	add	r24, r24
  bc:	99 1f       	adc	r25, r25
  be:	fc 01       	movw	r30, r24
  c0:	eb 59       	subi	r30, 0x9B	; 155
  c2:	ff 4f       	sbci	r31, 0xFF	; 255
	u8 BtnPort;
	u8 BtnMask;
	u8 PinData;
	u8 RetVal;
	PrevState = BTN_PrevState[BtnId];
	BtnPort = BTN_ConfigData[BtnId].BtnPort;
  c4:	dc 01       	movw	r26, r24
  c6:	ac 59       	subi	r26, 0x9C	; 156
  c8:	bf 4f       	sbci	r27, 0xFF	; 255
	BtnMask = BTN_ConfigData[BtnId].BtnMask;
	PinData = DIO_ReadPort(BtnPort,BtnMask);
  ca:	60 81       	ld	r22, Z
  cc:	8c 91       	ld	r24, X
  ce:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_ReadPort>
		if(PrevState == STATE_OPEN)
  d2:	11 11       	cpse	r17, r1
  d4:	0d c0       	rjmp	.+26     	; 0xf0 <Btn_Read+0x4a>
		{
			if(PinData == 0x00)
  d6:	81 11       	cpse	r24, r1
  d8:	05 c0       	rjmp	.+10     	; 0xe4 <Btn_Read+0x3e>
			{
				PrevState = STATE_OPEN;
				BTN_PrevState[BtnId] = PrevState;
  da:	c4 54       	subi	r28, 0x44	; 68
  dc:	de 4f       	sbci	r29, 0xFE	; 254
  de:	18 82       	st	Y, r1
				RetVal = BTN_INACTIVE;
  e0:	81 e0       	ldi	r24, 0x01	; 1
  e2:	11 c0       	rjmp	.+34     	; 0x106 <Btn_Read+0x60>
			}
			else
			{
				PrevState = STATE_CLOSED;
				BTN_PrevState[BtnId] = PrevState;
  e4:	c4 54       	subi	r28, 0x44	; 68
  e6:	de 4f       	sbci	r29, 0xFE	; 254
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	88 83       	st	Y, r24
				RetVal = BTN_ACTIVE;
  ec:	80 e0       	ldi	r24, 0x00	; 0
  ee:	0b c0       	rjmp	.+22     	; 0x106 <Btn_Read+0x60>
			}
		}
		else
		{
			if(PinData == 0x00)
  f0:	81 11       	cpse	r24, r1
  f2:	05 c0       	rjmp	.+10     	; 0xfe <Btn_Read+0x58>
			{
				PrevState = STATE_OPEN;
				BTN_PrevState[BtnId] = PrevState;
  f4:	c4 54       	subi	r28, 0x44	; 68
  f6:	de 4f       	sbci	r29, 0xFE	; 254
  f8:	18 82       	st	Y, r1
				RetVal = BTN_INACTIVE;
  fa:	81 e0       	ldi	r24, 0x01	; 1
  fc:	04 c0       	rjmp	.+8      	; 0x106 <Btn_Read+0x60>
			}
			else
			{
				PrevState = STATE_CLOSED;
				BTN_PrevState[BtnId] = PrevState;
  fe:	c4 54       	subi	r28, 0x44	; 68
 100:	de 4f       	sbci	r29, 0xFE	; 254
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	88 83       	st	Y, r24
				RetVal = BTN_INACTIVE;
			}			
		}
return RetVal;
}	
 106:	df 91       	pop	r29
 108:	cf 91       	pop	r28
 10a:	1f 91       	pop	r17
 10c:	08 95       	ret

0000010e <DIO_InitPortDirection>:
#define READ_REG(Reg,Mask) Reg & Mask

void DIO_InitPortDirection(u8 PortName,u8 PortDirection,u8 PortMask)
{
	//check the required port, specified bits and direction on the Data Direction Register
	switch(PortName)
 10e:	81 30       	cpi	r24, 0x01	; 1
 110:	81 f0       	breq	.+32     	; 0x132 <DIO_InitPortDirection+0x24>
 112:	28 f0       	brcs	.+10     	; 0x11e <DIO_InitPortDirection+0x10>
 114:	82 30       	cpi	r24, 0x02	; 2
 116:	b9 f0       	breq	.+46     	; 0x146 <DIO_InitPortDirection+0x38>
 118:	83 30       	cpi	r24, 0x03	; 3
 11a:	f9 f0       	breq	.+62     	; 0x15a <DIO_InitPortDirection+0x4c>
 11c:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(DDRA,PortDirection,PortMask);
 11e:	8a b3       	in	r24, 0x1a	; 26
 120:	94 2f       	mov	r25, r20
 122:	90 95       	com	r25
 124:	89 23       	and	r24, r25
 126:	8a bb       	out	0x1a, r24	; 26
 128:	8a b3       	in	r24, 0x1a	; 26
 12a:	46 23       	and	r20, r22
 12c:	48 2b       	or	r20, r24
 12e:	4a bb       	out	0x1a, r20	; 26
		}
		break;
 130:	08 95       	ret
		case PB:
		{
			WRITE_REG(DDRB,PortDirection,PortMask);
 132:	87 b3       	in	r24, 0x17	; 23
 134:	94 2f       	mov	r25, r20
 136:	90 95       	com	r25
 138:	89 23       	and	r24, r25
 13a:	87 bb       	out	0x17, r24	; 23
 13c:	87 b3       	in	r24, 0x17	; 23
 13e:	46 23       	and	r20, r22
 140:	48 2b       	or	r20, r24
 142:	47 bb       	out	0x17, r20	; 23
		}
		break;
 144:	08 95       	ret
		case PC:
		{
			WRITE_REG(DDRC,PortDirection,PortMask);
 146:	84 b3       	in	r24, 0x14	; 20
 148:	94 2f       	mov	r25, r20
 14a:	90 95       	com	r25
 14c:	89 23       	and	r24, r25
 14e:	84 bb       	out	0x14, r24	; 20
 150:	84 b3       	in	r24, 0x14	; 20
 152:	46 23       	and	r20, r22
 154:	48 2b       	or	r20, r24
 156:	44 bb       	out	0x14, r20	; 20
		}
		break;
 158:	08 95       	ret
		case PD:
		{
			WRITE_REG(DDRD,PortDirection,PortMask);
 15a:	81 b3       	in	r24, 0x11	; 17
 15c:	94 2f       	mov	r25, r20
 15e:	90 95       	com	r25
 160:	89 23       	and	r24, r25
 162:	81 bb       	out	0x11, r24	; 17
 164:	81 b3       	in	r24, 0x11	; 17
 166:	46 23       	and	r20, r22
 168:	48 2b       	or	r20, r24
 16a:	41 bb       	out	0x11, r20	; 17
 16c:	08 95       	ret

0000016e <DIO_WritePort>:
}

void DIO_WritePort(u8 PortName,u8 PortData,u8 PortMask)
{
	//check the required port, specified bits and value on the Port Data Register
	switch(PortName)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	81 f0       	breq	.+32     	; 0x192 <DIO_WritePort+0x24>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_WritePort+0x10>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	b9 f0       	breq	.+46     	; 0x1a6 <DIO_WritePort+0x38>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	f9 f0       	breq	.+62     	; 0x1ba <DIO_WritePort+0x4c>
 17c:	08 95       	ret
	{
		case PA:
		{
			WRITE_REG(PORTA,PortData,PortMask);
 17e:	8b b3       	in	r24, 0x1b	; 27
 180:	94 2f       	mov	r25, r20
 182:	90 95       	com	r25
 184:	89 23       	and	r24, r25
 186:	8b bb       	out	0x1b, r24	; 27
 188:	8b b3       	in	r24, 0x1b	; 27
 18a:	46 23       	and	r20, r22
 18c:	48 2b       	or	r20, r24
 18e:	4b bb       	out	0x1b, r20	; 27
		}
		break;
 190:	08 95       	ret
		case PB:
		{
			WRITE_REG(PORTB,PortData,PortMask);
 192:	88 b3       	in	r24, 0x18	; 24
 194:	94 2f       	mov	r25, r20
 196:	90 95       	com	r25
 198:	89 23       	and	r24, r25
 19a:	88 bb       	out	0x18, r24	; 24
 19c:	88 b3       	in	r24, 0x18	; 24
 19e:	46 23       	and	r20, r22
 1a0:	48 2b       	or	r20, r24
 1a2:	48 bb       	out	0x18, r20	; 24
		}
		break;
 1a4:	08 95       	ret
		case PC:
		{
			WRITE_REG(PORTC,PortData,PortMask);
 1a6:	85 b3       	in	r24, 0x15	; 21
 1a8:	94 2f       	mov	r25, r20
 1aa:	90 95       	com	r25
 1ac:	89 23       	and	r24, r25
 1ae:	85 bb       	out	0x15, r24	; 21
 1b0:	85 b3       	in	r24, 0x15	; 21
 1b2:	46 23       	and	r20, r22
 1b4:	48 2b       	or	r20, r24
 1b6:	45 bb       	out	0x15, r20	; 21
		}
		break;
 1b8:	08 95       	ret
		case PD:
		{
			WRITE_REG(PORTD,PortData,PortMask);
 1ba:	82 b3       	in	r24, 0x12	; 18
 1bc:	94 2f       	mov	r25, r20
 1be:	90 95       	com	r25
 1c0:	89 23       	and	r24, r25
 1c2:	82 bb       	out	0x12, r24	; 18
 1c4:	82 b3       	in	r24, 0x12	; 18
 1c6:	46 23       	and	r20, r22
 1c8:	48 2b       	or	r20, r24
 1ca:	42 bb       	out	0x12, r20	; 18
 1cc:	08 95       	ret

000001ce <DIO_ReadPort>:
}
u8 DIO_ReadPort(u8 PortName,u8 PortMAsk)
{
	//check the required port, specified bits and value from the Port input Register
	u8 Data;
	switch(PortName)
 1ce:	81 30       	cpi	r24, 0x01	; 1
 1d0:	49 f0       	breq	.+18     	; 0x1e4 <DIO_ReadPort+0x16>
 1d2:	28 f0       	brcs	.+10     	; 0x1de <DIO_ReadPort+0x10>
 1d4:	82 30       	cpi	r24, 0x02	; 2
 1d6:	49 f0       	breq	.+18     	; 0x1ea <DIO_ReadPort+0x1c>
 1d8:	83 30       	cpi	r24, 0x03	; 3
 1da:	51 f0       	breq	.+20     	; 0x1f0 <DIO_ReadPort+0x22>
 1dc:	0b c0       	rjmp	.+22     	; 0x1f4 <DIO_ReadPort+0x26>
	{
		case PA:
		{
			Data = READ_REG(PINA,PortMAsk);
 1de:	29 b3       	in	r18, 0x19	; 25
 1e0:	26 23       	and	r18, r22
		}
		break;
 1e2:	08 c0       	rjmp	.+16     	; 0x1f4 <DIO_ReadPort+0x26>
		case PB:
		{
			Data = READ_REG(PINB,PortMAsk);
 1e4:	26 b3       	in	r18, 0x16	; 22
 1e6:	26 23       	and	r18, r22
		}
		break;
 1e8:	05 c0       	rjmp	.+10     	; 0x1f4 <DIO_ReadPort+0x26>
		case PC:
		{
			Data = READ_REG(PINC,PortMAsk);
 1ea:	23 b3       	in	r18, 0x13	; 19
 1ec:	26 23       	and	r18, r22
		}
		break;
 1ee:	02 c0       	rjmp	.+4      	; 0x1f4 <DIO_ReadPort+0x26>
		case PD:
		{
			Data = READ_REG(PIND,PortMAsk);
 1f0:	20 b3       	in	r18, 0x10	; 16
 1f2:	26 23       	and	r18, r22
		break;
		
	}
	return Data;
	
 1f4:	82 2f       	mov	r24, r18
 1f6:	08 95       	ret

000001f8 <Display_welcome>:

// state 0 right 1 left
static u8 state = 0 ;
static u8 Xindex = 0;
void Display_welcome(char* msg)
{
 1f8:	cf 93       	push	r28
 1fa:	df 93       	push	r29
 1fc:	ec 01       	movw	r28, r24
	
	u8 rotateNumber = (16-(strlen(msg))) ;
 1fe:	fc 01       	movw	r30, r24
 200:	01 90       	ld	r0, Z+
 202:	00 20       	and	r0, r0
 204:	e9 f7       	brne	.-6      	; 0x200 <Display_welcome+0x8>
 206:	31 97       	sbiw	r30, 0x01	; 1
 208:	e8 1b       	sub	r30, r24
 20a:	f9 0b       	sbc	r31, r25
	if(state==0)
 20c:	80 91 be 01 	lds	r24, 0x01BE
 210:	81 11       	cpse	r24, r1
 212:	29 c0       	rjmp	.+82     	; 0x266 <Display_welcome+0x6e>
	{
		if(Xindex==(rotateNumber-1))
 214:	40 91 bd 01 	lds	r20, 0x01BD
 218:	24 2f       	mov	r18, r20
 21a:	30 e0       	ldi	r19, 0x00	; 0
static u8 state = 0 ;
static u8 Xindex = 0;
void Display_welcome(char* msg)
{
	
	u8 rotateNumber = (16-(strlen(msg))) ;
 21c:	80 e1       	ldi	r24, 0x10	; 16
 21e:	8e 1b       	sub	r24, r30
	if(state==0)
	{
		if(Xindex==(rotateNumber-1))
 220:	90 e0       	ldi	r25, 0x00	; 0
 222:	01 97       	sbiw	r24, 0x01	; 1
 224:	28 17       	cp	r18, r24
 226:	39 07       	cpc	r19, r25
 228:	39 f4       	brne	.+14     	; 0x238 <Display_welcome+0x40>
		{
			state = 1 ;
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	80 93 be 01 	sts	0x01BE, r24
			Xindex ++ ;
 230:	4f 5f       	subi	r20, 0xFF	; 255
 232:	40 93 bd 01 	sts	0x01BD, r20
 236:	03 c0       	rjmp	.+6      	; 0x23e <Display_welcome+0x46>
		}
		else 
			Xindex++ ;
 238:	4f 5f       	subi	r20, 0xFF	; 255
 23a:	40 93 bd 01 	sts	0x01BD, r20
		lcd_clrScreen();
 23e:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
		lcd_gotoxy(Xindex , 0) ;
 242:	60 e0       	ldi	r22, 0x00	; 0
 244:	80 91 bd 01 	lds	r24, 0x01BD
 248:	0e 94 39 03 	call	0x672	; 0x672 <lcd_gotoxy>
		lcd_dispString(msg) ;
 24c:	ce 01       	movw	r24, r28
 24e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 252:	2f e7       	ldi	r18, 0x7F	; 127
 254:	8a e1       	ldi	r24, 0x1A	; 26
 256:	96 e0       	ldi	r25, 0x06	; 6
 258:	21 50       	subi	r18, 0x01	; 1
 25a:	80 40       	sbci	r24, 0x00	; 0
 25c:	90 40       	sbci	r25, 0x00	; 0
 25e:	e1 f7       	brne	.-8      	; 0x258 <Display_welcome+0x60>
 260:	00 c0       	rjmp	.+0      	; 0x262 <Display_welcome+0x6a>
 262:	00 00       	nop
 264:	1f c0       	rjmp	.+62     	; 0x2a4 <Display_welcome+0xac>
		_delay_ms(250) ;
	}
	else
	{
		if(Xindex == 1)
 266:	80 91 bd 01 	lds	r24, 0x01BD
 26a:	81 30       	cpi	r24, 0x01	; 1
 26c:	29 f4       	brne	.+10     	; 0x278 <Display_welcome+0x80>
		{
			state = 0 ;
 26e:	10 92 be 01 	sts	0x01BE, r1
			Xindex-- ;
 272:	10 92 bd 01 	sts	0x01BD, r1
 276:	03 c0       	rjmp	.+6      	; 0x27e <Display_welcome+0x86>
		}
		else
			Xindex -- ;
 278:	81 50       	subi	r24, 0x01	; 1
 27a:	80 93 bd 01 	sts	0x01BD, r24
	lcd_clrScreen();
 27e:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
	lcd_gotoxy(Xindex,0) ;
 282:	60 e0       	ldi	r22, 0x00	; 0
 284:	80 91 bd 01 	lds	r24, 0x01BD
 288:	0e 94 39 03 	call	0x672	; 0x672 <lcd_gotoxy>
	lcd_dispString(msg) ;
 28c:	ce 01       	movw	r24, r28
 28e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
 292:	2f e7       	ldi	r18, 0x7F	; 127
 294:	8a e1       	ldi	r24, 0x1A	; 26
 296:	96 e0       	ldi	r25, 0x06	; 6
 298:	21 50       	subi	r18, 0x01	; 1
 29a:	80 40       	sbci	r24, 0x00	; 0
 29c:	90 40       	sbci	r25, 0x00	; 0
 29e:	e1 f7       	brne	.-8      	; 0x298 <Display_welcome+0xa0>
 2a0:	00 c0       	rjmp	.+0      	; 0x2a2 <Display_welcome+0xaa>
 2a2:	00 00       	nop
	_delay_ms(250) ;		
	}
}
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <Display_getAns>:


int Display_getAns()
{
 2aa:	ff 92       	push	r15
 2ac:	0f 93       	push	r16
 2ae:	1f 93       	push	r17
 2b0:	cf 93       	push	r28
 2b2:	df 93       	push	r29
 2b4:	cd b7       	in	r28, 0x3d	; 61
 2b6:	de b7       	in	r29, 0x3e	; 62
 2b8:	27 97       	sbiw	r28, 0x07	; 7
 2ba:	0f b6       	in	r0, 0x3f	; 63
 2bc:	f8 94       	cli
 2be:	de bf       	out	0x3e, r29	; 62
 2c0:	0f be       	out	0x3f, r0	; 63
 2c2:	cd bf       	out	0x3d, r28	; 61
	int intAns = 0 ;
	char usrAns[7] ;
	u8 arrIndex = 0 ;
	lcd_gotoxy(0,1) ;
 2c4:	61 e0       	ldi	r22, 0x01	; 1
 2c6:	80 e0       	ldi	r24, 0x00	; 0
 2c8:	0e 94 39 03 	call	0x672	; 0x672 <lcd_gotoxy>
	u8 lcdIndex = 0 ;
 2cc:	00 e0       	ldi	r16, 0x00	; 0

int Display_getAns()
{
	int intAns = 0 ;
	char usrAns[7] ;
	u8 arrIndex = 0 ;
 2ce:	10 e0       	ldi	r17, 0x00	; 0
		{
			if(arrIndex==0) ;
			else
			{
				arrIndex-- ;
				usrAns[arrIndex] = ' ' ;
 2d0:	68 94       	set
 2d2:	ff 24       	eor	r15, r15
 2d4:	f5 f8       	bld	r15, 5
	u8 arrIndex = 0 ;
	lcd_gotoxy(0,1) ;
	u8 lcdIndex = 0 ;
	while(1)
	{
		char inKey = Keypad_Read() ;
 2d6:	0e 94 1c 02 	call	0x438	; 0x438 <Keypad_Read>
		if(inKey == '#')
 2da:	83 32       	cpi	r24, 0x23	; 35
 2dc:	e9 f1       	breq	.+122    	; 0x358 <Display_getAns+0xae>
			break ;
		else if (inKey == '*')
 2de:	8a 32       	cpi	r24, 0x2A	; 42
 2e0:	01 f5       	brne	.+64     	; 0x322 <Display_getAns+0x78>
		{
			if(arrIndex==0) ;
 2e2:	11 23       	and	r17, r17
 2e4:	c1 f3       	breq	.-16     	; 0x2d6 <Display_getAns+0x2c>
			else
			{
				arrIndex-- ;
 2e6:	11 50       	subi	r17, 0x01	; 1
				usrAns[arrIndex] = ' ' ;
 2e8:	e1 e0       	ldi	r30, 0x01	; 1
 2ea:	f0 e0       	ldi	r31, 0x00	; 0
 2ec:	ec 0f       	add	r30, r28
 2ee:	fd 1f       	adc	r31, r29
 2f0:	e1 0f       	add	r30, r17
 2f2:	f1 1d       	adc	r31, r1
 2f4:	f0 82       	st	Z, r15
				lcdIndex-- ;
 2f6:	01 50       	subi	r16, 0x01	; 1
				lcd_gotoxy(lcdIndex, 1) ;
 2f8:	61 e0       	ldi	r22, 0x01	; 1
 2fa:	80 2f       	mov	r24, r16
 2fc:	0e 94 39 03 	call	0x672	; 0x672 <lcd_gotoxy>
				lcd_displayChar(' ') ;
 300:	8f 2d       	mov	r24, r15
 302:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_displayChar>
// 				lcdIndex -- ;
 				lcd_gotoxy(lcdIndex , 1) ;
 306:	61 e0       	ldi	r22, 0x01	; 1
 308:	80 2f       	mov	r24, r16
 30a:	0e 94 39 03 	call	0x672	; 0x672 <lcd_gotoxy>
 30e:	2f e7       	ldi	r18, 0x7F	; 127
 310:	8a e1       	ldi	r24, 0x1A	; 26
 312:	96 e0       	ldi	r25, 0x06	; 6
 314:	21 50       	subi	r18, 0x01	; 1
 316:	80 40       	sbci	r24, 0x00	; 0
 318:	90 40       	sbci	r25, 0x00	; 0
 31a:	e1 f7       	brne	.-8      	; 0x314 <Display_getAns+0x6a>
 31c:	00 c0       	rjmp	.+0      	; 0x31e <Display_getAns+0x74>
 31e:	00 00       	nop
 320:	da cf       	rjmp	.-76     	; 0x2d6 <Display_getAns+0x2c>
				_delay_ms(250);
			}
		}
		else if (inKey=='1' || inKey =='2' || inKey =='3' || inKey =='4' || inKey =='5' || inKey =='6' || inKey =='7' || inKey =='8' || inKey =='9'|| inKey =='0')
 322:	90 ed       	ldi	r25, 0xD0	; 208
 324:	98 0f       	add	r25, r24
 326:	9a 30       	cpi	r25, 0x0A	; 10
 328:	b0 f6       	brcc	.-84     	; 0x2d6 <Display_getAns+0x2c>
		{
			if(arrIndex==5) ;
 32a:	15 30       	cpi	r17, 0x05	; 5
 32c:	a1 f2       	breq	.-88     	; 0x2d6 <Display_getAns+0x2c>
			else 
			{
				usrAns[arrIndex] = inKey ;
 32e:	e1 e0       	ldi	r30, 0x01	; 1
 330:	f0 e0       	ldi	r31, 0x00	; 0
 332:	ec 0f       	add	r30, r28
 334:	fd 1f       	adc	r31, r29
 336:	e1 0f       	add	r30, r17
 338:	f1 1d       	adc	r31, r1
 33a:	80 83       	st	Z, r24
				arrIndex++ ;
 33c:	1f 5f       	subi	r17, 0xFF	; 255
				lcd_displayChar(inKey) ;
 33e:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_displayChar>
				lcdIndex++ ;
 342:	0f 5f       	subi	r16, 0xFF	; 255
 344:	2f e7       	ldi	r18, 0x7F	; 127
 346:	8a e1       	ldi	r24, 0x1A	; 26
 348:	96 e0       	ldi	r25, 0x06	; 6
 34a:	21 50       	subi	r18, 0x01	; 1
 34c:	80 40       	sbci	r24, 0x00	; 0
 34e:	90 40       	sbci	r25, 0x00	; 0
 350:	e1 f7       	brne	.-8      	; 0x34a <Display_getAns+0xa0>
 352:	00 c0       	rjmp	.+0      	; 0x354 <Display_getAns+0xaa>
 354:	00 00       	nop
 356:	bf cf       	rjmp	.-130    	; 0x2d6 <Display_getAns+0x2c>
				_delay_ms(250) ;
			}
		}
	}
	usrAns[arrIndex] ='\0';
 358:	e1 e0       	ldi	r30, 0x01	; 1
 35a:	f0 e0       	ldi	r31, 0x00	; 0
 35c:	ec 0f       	add	r30, r28
 35e:	fd 1f       	adc	r31, r29
 360:	e1 0f       	add	r30, r17
 362:	f1 1d       	adc	r31, r1
 364:	10 82       	st	Z, r1
	
// 	lcd_clrScreen();
// 	lcd_dispString("string : ") ;
// 	lcd_dispString(usrAns);
	intAns = atoi(usrAns) ;
 366:	ce 01       	movw	r24, r28
 368:	01 96       	adiw	r24, 0x01	; 1
 36a:	0e 94 7a 04 	call	0x8f4	; 0x8f4 <atoi>
// 	lcd_dispString("int : ") ;
// 	lcd_displayInt(intAns) ;
// 	_delay_ms(2000) ;
		
	return intAns ;
}
 36e:	27 96       	adiw	r28, 0x07	; 7
 370:	0f b6       	in	r0, 0x3f	; 63
 372:	f8 94       	cli
 374:	de bf       	out	0x3e, r29	; 62
 376:	0f be       	out	0x3f, r0	; 63
 378:	cd bf       	out	0x3d, r28	; 61
 37a:	df 91       	pop	r29
 37c:	cf 91       	pop	r28
 37e:	1f 91       	pop	r17
 380:	0f 91       	pop	r16
 382:	ff 90       	pop	r15
 384:	08 95       	ret

00000386 <Keypad_Init>:
#include "Keypad.h"

static u8 RowShiftValue = 0 ;
static u8 ColShiftValue = 0 ;
void Keypad_Init( void )
{
 386:	ef 92       	push	r14
 388:	ff 92       	push	r15
 38a:	0f 93       	push	r16
 38c:	1f 93       	push	r17
 38e:	cf 93       	push	r28
 390:	df 93       	push	r29
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0xFF , KeypadConfigData.RowsMask);
 392:	03 e7       	ldi	r16, 0x73	; 115
 394:	10 e0       	ldi	r17, 0x00	; 0
 396:	c2 e7       	ldi	r28, 0x72	; 114
 398:	d0 e0       	ldi	r29, 0x00	; 0
 39a:	f8 01       	movw	r30, r16
 39c:	40 81       	ld	r20, Z
 39e:	6f ef       	ldi	r22, 0xFF	; 255
 3a0:	88 81       	ld	r24, Y
 3a2:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0x00 , KeypadConfigData.ColsMask);
 3a6:	0f 2e       	mov	r0, r31
 3a8:	f4 e7       	ldi	r31, 0x74	; 116
 3aa:	ef 2e       	mov	r14, r31
 3ac:	f0 e0       	ldi	r31, 0x00	; 0
 3ae:	ff 2e       	mov	r15, r31
 3b0:	f0 2d       	mov	r31, r0
 3b2:	f7 01       	movw	r30, r14
 3b4:	40 81       	ld	r20, Z
 3b6:	60 e0       	ldi	r22, 0x00	; 0
 3b8:	88 81       	ld	r24, Y
 3ba:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
	DIO_WritePort(KeypadConfigData.KeypadPort, 0xFF , KeypadConfigData.ColsMask) ;
 3be:	f7 01       	movw	r30, r14
 3c0:	40 81       	ld	r20, Z
 3c2:	6f ef       	ldi	r22, 0xFF	; 255
 3c4:	88 81       	ld	r24, Y
 3c6:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	/*row shift value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
	{
		if ((KeypadConfigData.RowsMask & loopIndex )== 0)
 3ca:	f8 01       	movw	r30, r16
 3cc:	80 81       	ld	r24, Z
 3ce:	80 ff       	sbrs	r24, 0
 3d0:	25 c0       	rjmp	.+74     	; 0x41c <Keypad_Init+0x96>
 3d2:	1a c0       	rjmp	.+52     	; 0x408 <Keypad_Init+0x82>
 3d4:	98 2f       	mov	r25, r24
 3d6:	93 23       	and	r25, r19
 3d8:	19 f0       	breq	.+6      	; 0x3e0 <Keypad_Init+0x5a>
 3da:	20 93 c0 01 	sts	0x01C0, r18
 3de:	14 c0       	rjmp	.+40     	; 0x408 <Keypad_Init+0x82>
		{
			RowShiftValue++;
 3e0:	2f 5f       	subi	r18, 0xFF	; 255
{
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0xFF , KeypadConfigData.RowsMask);
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0x00 , KeypadConfigData.ColsMask);
	DIO_WritePort(KeypadConfigData.KeypadPort, 0xFF , KeypadConfigData.ColsMask) ;
	/*row shift value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
 3e2:	88 0f       	add	r24, r24
 3e4:	89 30       	cpi	r24, 0x09	; 9
 3e6:	b0 f3       	brcs	.-20     	; 0x3d4 <Keypad_Init+0x4e>
 3e8:	20 93 c0 01 	sts	0x01C0, r18
 3ec:	0d c0       	rjmp	.+26     	; 0x408 <Keypad_Init+0x82>
		else break;
	}
	/*col shif value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
	{
		if ((KeypadConfigData.ColsMask & loopIndex )== 0)
 3ee:	98 2f       	mov	r25, r24
 3f0:	93 23       	and	r25, r19
 3f2:	19 f0       	breq	.+6      	; 0x3fa <Keypad_Init+0x74>
 3f4:	20 93 bf 01 	sts	0x01BF, r18
 3f8:	18 c0       	rjmp	.+48     	; 0x42a <Keypad_Init+0xa4>
		{
			ColShiftValue++;
 3fa:	2f 5f       	subi	r18, 0xFF	; 255
			RowShiftValue++;
		}
		else break;
	}
	/*col shif value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
 3fc:	88 0f       	add	r24, r24
 3fe:	89 30       	cpi	r24, 0x09	; 9
 400:	b0 f3       	brcs	.-20     	; 0x3ee <Keypad_Init+0x68>
 402:	20 93 bf 01 	sts	0x01BF, r18
 406:	11 c0       	rjmp	.+34     	; 0x42a <Keypad_Init+0xa4>
	{
		if ((KeypadConfigData.ColsMask & loopIndex )== 0)
 408:	80 91 74 00 	lds	r24, 0x0074
 40c:	80 fd       	sbrc	r24, 0
 40e:	0d c0       	rjmp	.+26     	; 0x42a <Keypad_Init+0xa4>
		{
			ColShiftValue++;
 410:	20 91 bf 01 	lds	r18, 0x01BF
		else break;
	}
	/*col shif value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
	{
		if ((KeypadConfigData.ColsMask & loopIndex )== 0)
 414:	38 2f       	mov	r19, r24
 416:	2f 5f       	subi	r18, 0xFF	; 255
			RowShiftValue++;
		}
		else break;
	}
	/*col shif value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	e9 cf       	rjmp	.-46     	; 0x3ee <Keypad_Init+0x68>
	/*row shift value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
	{
		if ((KeypadConfigData.RowsMask & loopIndex )== 0)
		{
			RowShiftValue++;
 41c:	20 91 c0 01 	lds	r18, 0x01C0
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0x00 , KeypadConfigData.ColsMask);
	DIO_WritePort(KeypadConfigData.KeypadPort, 0xFF , KeypadConfigData.ColsMask) ;
	/*row shift value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
	{
		if ((KeypadConfigData.RowsMask & loopIndex )== 0)
 420:	30 91 73 00 	lds	r19, 0x0073
 424:	2f 5f       	subi	r18, 0xFF	; 255
{
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0xFF , KeypadConfigData.RowsMask);
	DIO_InitPortDirection(KeypadConfigData.KeypadPort , 0x00 , KeypadConfigData.ColsMask);
	DIO_WritePort(KeypadConfigData.KeypadPort, 0xFF , KeypadConfigData.ColsMask) ;
	/*row shift value finder*/
	for(u8 loopIndex = 0x01 ; loopIndex <= 0x08 ; loopIndex<<=1)
 426:	82 e0       	ldi	r24, 0x02	; 2
 428:	d5 cf       	rjmp	.-86     	; 0x3d4 <Keypad_Init+0x4e>
		{
			ColShiftValue++;
		}
		else break;
	}
}
 42a:	df 91       	pop	r29
 42c:	cf 91       	pop	r28
 42e:	1f 91       	pop	r17
 430:	0f 91       	pop	r16
 432:	ff 90       	pop	r15
 434:	ef 90       	pop	r14
 436:	08 95       	ret

00000438 <Keypad_Read>:

u8 Keypad_Read( void )
{
 438:	df 92       	push	r13
 43a:	ef 92       	push	r14
 43c:	ff 92       	push	r15
 43e:	0f 93       	push	r16
 440:	1f 93       	push	r17
 442:	cf 93       	push	r28
 444:	df 93       	push	r29
	u8 row = 0 , col = 0 ;
	u8 key ;
	for( row =0x01 ; row<= (1<<(ROWS_NUM-1)) ; row<<=1)
 446:	dd 24       	eor	r13, r13
 448:	d3 94       	inc	r13
	{
		DIO_WritePort(KeypadConfigData.KeypadPort ,(~(row<<RowShiftValue)) , KeypadConfigData.RowsMask);
 44a:	0f 2e       	mov	r0, r31
 44c:	f3 e7       	ldi	r31, 0x73	; 115
 44e:	ef 2e       	mov	r14, r31
 450:	f0 e0       	ldi	r31, 0x00	; 0
 452:	ff 2e       	mov	r15, r31
 454:	f0 2d       	mov	r31, r0
 456:	02 e7       	ldi	r16, 0x72	; 114
 458:	10 e0       	ldi	r17, 0x00	; 0
		u8 temp =  DIO_ReadPort(KeypadConfigData.KeypadPort , KeypadConfigData.ColsMask);
 45a:	c4 e7       	ldi	r28, 0x74	; 116
 45c:	d0 e0       	ldi	r29, 0x00	; 0
{
	u8 row = 0 , col = 0 ;
	u8 key ;
	for( row =0x01 ; row<= (1<<(ROWS_NUM-1)) ; row<<=1)
	{
		DIO_WritePort(KeypadConfigData.KeypadPort ,(~(row<<RowShiftValue)) , KeypadConfigData.RowsMask);
 45e:	6d 2d       	mov	r22, r13
 460:	70 e0       	ldi	r23, 0x00	; 0
 462:	00 90 c0 01 	lds	r0, 0x01C0
 466:	02 c0       	rjmp	.+4      	; 0x46c <Keypad_Read+0x34>
 468:	66 0f       	add	r22, r22
 46a:	77 1f       	adc	r23, r23
 46c:	0a 94       	dec	r0
 46e:	e2 f7       	brpl	.-8      	; 0x468 <Keypad_Read+0x30>
 470:	60 95       	com	r22
 472:	f7 01       	movw	r30, r14
 474:	40 81       	ld	r20, Z
 476:	f8 01       	movw	r30, r16
 478:	80 81       	ld	r24, Z
 47a:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
		u8 temp =  DIO_ReadPort(KeypadConfigData.KeypadPort , KeypadConfigData.ColsMask);
 47e:	68 81       	ld	r22, Y
 480:	f8 01       	movw	r30, r16
 482:	80 81       	ld	r24, Z
 484:	0e 94 e7 00 	call	0x1ce	; 0x1ce <DIO_ReadPort>
		if(temp<KeypadConfigData.ColsMask )
 488:	98 81       	ld	r25, Y
 48a:	89 17       	cp	r24, r25
 48c:	28 f0       	brcs	.+10     	; 0x498 <Keypad_Read+0x60>

u8 Keypad_Read( void )
{
	u8 row = 0 , col = 0 ;
	u8 key ;
	for( row =0x01 ; row<= (1<<(ROWS_NUM-1)) ; row<<=1)
 48e:	dd 0c       	add	r13, r13
 490:	f8 e0       	ldi	r31, 0x08	; 8
 492:	fd 15       	cp	r31, r13
 494:	20 f7       	brcc	.-56     	; 0x45e <Keypad_Read+0x26>
	}
}

u8 Keypad_Read( void )
{
	u8 row = 0 , col = 0 ;
 496:	80 e0       	ldi	r24, 0x00	; 0
		{
			col = temp ;
			break ;
		}
	}
	col = ~ col ;
 498:	80 95       	com	r24
	col = col<<(8 - COL_NUM);
	col = col >> (8- COL_NUM) ;
 49a:	87 70       	andi	r24, 0x07	; 7
	col = col>>ColShiftValue ;
 49c:	90 e0       	ldi	r25, 0x00	; 0
 49e:	00 90 bf 01 	lds	r0, 0x01BF
 4a2:	02 c0       	rjmp	.+4      	; 0x4a8 <Keypad_Read+0x70>
 4a4:	95 95       	asr	r25
 4a6:	87 95       	ror	r24
 4a8:	0a 94       	dec	r0
 4aa:	e2 f7       	brpl	.-8      	; 0x4a4 <Keypad_Read+0x6c>
 4ac:	28 2f       	mov	r18, r24
	u8 RowIndex = ROWS_NUM-1 ,ColIndex = COL_NUM-1 ;
	for(u8 loopIndex =0x01 ; loopIndex<(1<<COL_NUM) ; loopIndex<<=1  )
	{
		if((loopIndex & col) == 0)
 4ae:	80 fd       	sbrc	r24, 0
 4b0:	1f c0       	rjmp	.+62     	; 0x4f0 <Keypad_Read+0xb8>
	col = ~ col ;
	col = col<<(8 - COL_NUM);
	col = col >> (8- COL_NUM) ;
	col = col>>ColShiftValue ;
	u8 RowIndex = ROWS_NUM-1 ,ColIndex = COL_NUM-1 ;
	for(u8 loopIndex =0x01 ; loopIndex<(1<<COL_NUM) ; loopIndex<<=1  )
 4b2:	82 e0       	ldi	r24, 0x02	; 2
	{
		if((loopIndex & col) == 0)
		{
			ColIndex--;
 4b4:	31 e0       	ldi	r19, 0x01	; 1
	col = col >> (8- COL_NUM) ;
	col = col>>ColShiftValue ;
	u8 RowIndex = ROWS_NUM-1 ,ColIndex = COL_NUM-1 ;
	for(u8 loopIndex =0x01 ; loopIndex<(1<<COL_NUM) ; loopIndex<<=1  )
	{
		if((loopIndex & col) == 0)
 4b6:	98 2f       	mov	r25, r24
 4b8:	92 23       	and	r25, r18
 4ba:	d9 f4       	brne	.+54     	; 0x4f2 <Keypad_Read+0xba>
		{
			ColIndex--;
 4bc:	31 50       	subi	r19, 0x01	; 1
	col = ~ col ;
	col = col<<(8 - COL_NUM);
	col = col >> (8- COL_NUM) ;
	col = col>>ColShiftValue ;
	u8 RowIndex = ROWS_NUM-1 ,ColIndex = COL_NUM-1 ;
	for(u8 loopIndex =0x01 ; loopIndex<(1<<COL_NUM) ; loopIndex<<=1  )
 4be:	88 0f       	add	r24, r24
 4c0:	88 30       	cpi	r24, 0x08	; 8
 4c2:	c8 f3       	brcs	.-14     	; 0x4b6 <Keypad_Read+0x7e>
 4c4:	16 c0       	rjmp	.+44     	; 0x4f2 <Keypad_Read+0xba>
		}
		else break;
	}
	for (u8 loopIndex = 0x01 ; loopIndex<(1<<ROWS_NUM) ; loopIndex<<=1)
	{
		if((loopIndex & row) ==0)
 4c6:	29 2f       	mov	r18, r25
 4c8:	2d 21       	and	r18, r13
 4ca:	31 f4       	brne	.+12     	; 0x4d8 <Keypad_Read+0xa0>
		{
			RowIndex--;
 4cc:	81 50       	subi	r24, 0x01	; 1
		{
			ColIndex--;
		}
		else break;
	}
	for (u8 loopIndex = 0x01 ; loopIndex<(1<<ROWS_NUM) ; loopIndex<<=1)
 4ce:	99 0f       	add	r25, r25
 4d0:	90 31       	cpi	r25, 0x10	; 16
 4d2:	c8 f3       	brcs	.-14     	; 0x4c6 <Keypad_Read+0x8e>
 4d4:	01 c0       	rjmp	.+2      	; 0x4d8 <Keypad_Read+0xa0>
	{
		if((loopIndex & row) ==0)
 4d6:	83 e0       	ldi	r24, 0x03	; 3
		}
		else break;
	}
	if(RowIndex<0  || ColIndex <0  ) {return 0;}
	else {
		key = keys[RowIndex][ColIndex] ;
 4d8:	90 e0       	ldi	r25, 0x00	; 0
 4da:	fc 01       	movw	r30, r24
 4dc:	ee 0f       	add	r30, r30
 4de:	ff 1f       	adc	r31, r31
 4e0:	e8 0f       	add	r30, r24
 4e2:	f9 1f       	adc	r31, r25
 4e4:	e3 0f       	add	r30, r19
 4e6:	f1 1d       	adc	r31, r1
 4e8:	ea 59       	subi	r30, 0x9A	; 154
 4ea:	ff 4f       	sbci	r31, 0xFF	; 255
 4ec:	80 81       	ld	r24, Z
 4ee:	06 c0       	rjmp	.+12     	; 0x4fc <Keypad_Read+0xc4>
	}
	col = ~ col ;
	col = col<<(8 - COL_NUM);
	col = col >> (8- COL_NUM) ;
	col = col>>ColShiftValue ;
	u8 RowIndex = ROWS_NUM-1 ,ColIndex = COL_NUM-1 ;
 4f0:	32 e0       	ldi	r19, 0x02	; 2
		}
		else break;
	}
	for (u8 loopIndex = 0x01 ; loopIndex<(1<<ROWS_NUM) ; loopIndex<<=1)
	{
		if((loopIndex & row) ==0)
 4f2:	d0 fc       	sbrc	r13, 0
 4f4:	f0 cf       	rjmp	.-32     	; 0x4d6 <Keypad_Read+0x9e>
		{
			ColIndex--;
		}
		else break;
	}
	for (u8 loopIndex = 0x01 ; loopIndex<(1<<ROWS_NUM) ; loopIndex<<=1)
 4f6:	92 e0       	ldi	r25, 0x02	; 2
	{
		if((loopIndex & row) ==0)
		{
			RowIndex--;
 4f8:	82 e0       	ldi	r24, 0x02	; 2
 4fa:	e5 cf       	rjmp	.-54     	; 0x4c6 <Keypad_Read+0x8e>
	else {
		key = keys[RowIndex][ColIndex] ;
		return key ;
	}
	
}
 4fc:	df 91       	pop	r29
 4fe:	cf 91       	pop	r28
 500:	1f 91       	pop	r17
 502:	0f 91       	pop	r16
 504:	ff 90       	pop	r15
 506:	ef 90       	pop	r14
 508:	df 90       	pop	r13
 50a:	08 95       	ret

0000050c <enableTrigger>:
////////////////////////////////////////////////////////////////////
static void lcd_sendCommand(unsigned char cmd);
void enableTrigger(void)
{

	CLR_BIT(LCD_ConfgData.CmdPort,LCD_E);
 50c:	48 e0       	ldi	r20, 0x08	; 8
 50e:	60 e0       	ldi	r22, 0x00	; 0
 510:	80 91 75 00 	lds	r24, 0x0075
 514:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 518:	87 ee       	ldi	r24, 0xE7	; 231
 51a:	93 e0       	ldi	r25, 0x03	; 3
 51c:	01 97       	sbiw	r24, 0x01	; 1
 51e:	f1 f7       	brne	.-4      	; 0x51c <enableTrigger+0x10>
 520:	00 c0       	rjmp	.+0      	; 0x522 <enableTrigger+0x16>
 522:	00 00       	nop
	_delay_us(500);

	SET_BIT(LCD_ConfgData.CmdPort,LCD_E);
 524:	48 e0       	ldi	r20, 0x08	; 8
 526:	6f ef       	ldi	r22, 0xFF	; 255
 528:	80 91 75 00 	lds	r24, 0x0075
 52c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
 530:	87 eb       	ldi	r24, 0xB7	; 183
 532:	9b e0       	ldi	r25, 0x0B	; 11
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <enableTrigger+0x28>
 538:	00 c0       	rjmp	.+0      	; 0x53a <enableTrigger+0x2e>
 53a:	00 00       	nop
 53c:	08 95       	ret

0000053e <lcd_sendCommand>:
		
}


static void lcd_sendCommand(unsigned char cmd)
{
 53e:	ff 92       	push	r15
 540:	0f 93       	push	r16
 542:	1f 93       	push	r17
 544:	cf 93       	push	r28
 546:	df 93       	push	r29
 548:	f8 2e       	mov	r15, r24
	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
	LOW_NIBBLE(low_nibble,cmd);

	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RS); // to enable command mode 
 54a:	c5 e7       	ldi	r28, 0x75	; 117
 54c:	d0 e0       	ldi	r29, 0x00	; 0
 54e:	42 e0       	ldi	r20, 0x02	; 2
 550:	60 e0       	ldi	r22, 0x00	; 0
 552:	88 81       	ld	r24, Y
 554:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RW); // write signal to lcd 
 558:	44 e0       	ldi	r20, 0x04	; 4
 55a:	60 e0       	ldi	r22, 0x00	; 0
 55c:	88 81       	ld	r24, Y
 55e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>

	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
 562:	07 e7       	ldi	r16, 0x77	; 119
 564:	10 e0       	ldi	r17, 0x00	; 0
 566:	c6 e7       	ldi	r28, 0x76	; 118
 568:	d0 e0       	ldi	r29, 0x00	; 0
 56a:	f8 01       	movw	r30, r16
 56c:	40 81       	ld	r20, Z
 56e:	60 e0       	ldi	r22, 0x00	; 0
 570:	88 81       	ld	r24, Y
 572:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
static void lcd_sendCommand(unsigned char cmd)
{

	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
 576:	6f 2d       	mov	r22, r15
 578:	60 7f       	andi	r22, 0xF0	; 240
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RS); // to enable command mode 
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RW); // write signal to lcd 

	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
	// to send high nibble command
	DIO_WritePort(LCD_ConfgData.DataPort , high_nibble , LCD_ConfgData.D47Mask); 
 57a:	f8 01       	movw	r30, r16
 57c:	40 81       	ld	r20, Z
 57e:	88 81       	ld	r24, Y
 580:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	enableTrigger(); // triggre lcd enable 
 584:	0e 94 86 02 	call	0x50c	; 0x50c <enableTrigger>

	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
 588:	f8 01       	movw	r30, r16
 58a:	40 81       	ld	r20, Z
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	88 81       	ld	r24, Y
 590:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
{

	unsigned char high_nibble , low_nibble ; 		
	
	HIGH_NIBBLE(high_nibble,cmd);
	LOW_NIBBLE(low_nibble,cmd);
 594:	6f 2d       	mov	r22, r15
 596:	62 95       	swap	r22
 598:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_ConfgData.DataPort , high_nibble , LCD_ConfgData.D47Mask); 
	enableTrigger(); // triggre lcd enable 

	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
	// to send low nibble command 
	DIO_WritePort(LCD_ConfgData.DataPort , low_nibble , LCD_ConfgData.D47Mask);
 59a:	f8 01       	movw	r30, r16
 59c:	40 81       	ld	r20, Z
 59e:	88 81       	ld	r24, Y
 5a0:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	enableTrigger();
 5a4:	0e 94 86 02 	call	0x50c	; 0x50c <enableTrigger>

}
 5a8:	df 91       	pop	r29
 5aa:	cf 91       	pop	r28
 5ac:	1f 91       	pop	r17
 5ae:	0f 91       	pop	r16
 5b0:	ff 90       	pop	r15
 5b2:	08 95       	ret

000005b4 <lcd_init>:
///////////////////////////////////////////////////////////////////////////////////////
// LCD initialization API : set portB from pinB.4 to pinB.7 as o/p for data and commands 
//							 and pinB.0 to pinB.2 o/p for control pins 
//////////////////////////////////////////////////////////////////////////////////////
void lcd_init(void)
{
 5b4:	cf 93       	push	r28
 5b6:	df 93       	push	r29

	// init port B as O/P port 
	DIO_InitPortDirection(LCD_ConfgData.CmdPort , 0xFF , (1<<LCD_E | 1<<LCD_RS | 1<<LCD_RW));
 5b8:	c5 e7       	ldi	r28, 0x75	; 117
 5ba:	d0 e0       	ldi	r29, 0x00	; 0
 5bc:	4e e0       	ldi	r20, 0x0E	; 14
 5be:	6f ef       	ldi	r22, 0xFF	; 255
 5c0:	88 81       	ld	r24, Y
 5c2:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
	DIO_InitPortDirection(LCD_ConfgData.DataPort, 0xFF , LCD_ConfgData.D47Mask);
 5c6:	40 91 77 00 	lds	r20, 0x0077
 5ca:	6f ef       	ldi	r22, 0xFF	; 255
 5cc:	80 91 76 00 	lds	r24, 0x0076
 5d0:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
	 // activate LCD enable 
	SET_BIT(LCD_ConfgData.CmdPort , LCD_E);
 5d4:	48 e0       	ldi	r20, 0x08	; 8
 5d6:	6f ef       	ldi	r22, 0xFF	; 255
 5d8:	88 81       	ld	r24, Y
 5da:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	 // 4-bit mode
	lcd_sendCommand(0x33); 
 5de:	83 e3       	ldi	r24, 0x33	; 51
 5e0:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>
	lcd_sendCommand (0x32);
 5e4:	82 e3       	ldi	r24, 0x32	; 50
 5e6:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>
	lcd_sendCommand (0x28);
 5ea:	88 e2       	ldi	r24, 0x28	; 40
 5ec:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>



	lcd_sendCommand(0x0c); // turn on lcd 
 5f0:	8c e0       	ldi	r24, 0x0C	; 12
 5f2:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>

		
}
 5f6:	df 91       	pop	r29
 5f8:	cf 91       	pop	r28
 5fa:	08 95       	ret

000005fc <lcd_displayChar>:
	enableTrigger();

}

void lcd_displayChar (unsigned char data)
{
 5fc:	ff 92       	push	r15
 5fe:	0f 93       	push	r16
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
 606:	f8 2e       	mov	r15, r24

	unsigned char high_nibble , low_nibble ;

	SET_BIT(LCD_ConfgData.CmdPort,LCD_RS); //  enable data mode 
 608:	c5 e7       	ldi	r28, 0x75	; 117
 60a:	d0 e0       	ldi	r29, 0x00	; 0
 60c:	42 e0       	ldi	r20, 0x02	; 2
 60e:	6f ef       	ldi	r22, 0xFF	; 255
 610:	88 81       	ld	r24, Y
 612:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RW); // activate lcd write 
 616:	44 e0       	ldi	r20, 0x04	; 4
 618:	60 e0       	ldi	r22, 0x00	; 0
 61a:	88 81       	ld	r24, Y
 61c:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
	
	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
 620:	07 e7       	ldi	r16, 0x77	; 119
 622:	10 e0       	ldi	r17, 0x00	; 0
 624:	c6 e7       	ldi	r28, 0x76	; 118
 626:	d0 e0       	ldi	r29, 0x00	; 0
 628:	f8 01       	movw	r30, r16
 62a:	40 81       	ld	r20, Z
 62c:	60 e0       	ldi	r22, 0x00	; 0
 62e:	88 81       	ld	r24, Y
 630:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	unsigned char high_nibble , low_nibble ;

	SET_BIT(LCD_ConfgData.CmdPort,LCD_RS); //  enable data mode 
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RW); // activate lcd write 

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
 634:	6f 2d       	mov	r22, r15
 636:	60 7f       	andi	r22, 0xF0	; 240
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
	
	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
	// to send high nibble data
	DIO_WritePort(LCD_ConfgData.DataPort , high_nibble , LCD_ConfgData.D47Mask);  
 638:	f8 01       	movw	r30, r16
 63a:	40 81       	ld	r20, Z
 63c:	88 81       	ld	r24, Y
 63e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	enableTrigger(); // triggre lcd enable 
 642:	0e 94 86 02 	call	0x50c	; 0x50c <enableTrigger>
	
	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
 646:	f8 01       	movw	r30, r16
 648:	40 81       	ld	r20, Z
 64a:	60 e0       	ldi	r22, 0x00	; 0
 64c:	88 81       	ld	r24, Y
 64e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>

	SET_BIT(LCD_ConfgData.CmdPort,LCD_RS); //  enable data mode 
	CLR_BIT(LCD_ConfgData.CmdPort,LCD_RW); // activate lcd write 

	HIGH_NIBBLE(high_nibble,data); // get high nibble data 
	LOW_NIBBLE(low_nibble,data); // get low nibble data 
 652:	6f 2d       	mov	r22, r15
 654:	62 95       	swap	r22
 656:	60 7f       	andi	r22, 0xF0	; 240
	DIO_WritePort(LCD_ConfgData.DataPort , high_nibble , LCD_ConfgData.D47Mask);  
	enableTrigger(); // triggre lcd enable 
	
	DIO_WritePort(LCD_ConfgData.DataPort , 0x00 , LCD_ConfgData.D47Mask);
	// to send low nibble data 
	DIO_WritePort(LCD_ConfgData.DataPort , low_nibble , LCD_ConfgData.D47Mask);
 658:	f8 01       	movw	r30, r16
 65a:	40 81       	ld	r20, Z
 65c:	88 81       	ld	r24, Y
 65e:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
	enableTrigger();
 662:	0e 94 86 02 	call	0x50c	; 0x50c <enableTrigger>
	

}
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	ff 90       	pop	r15
 670:	08 95       	ret

00000672 <lcd_gotoxy>:

void lcd_gotoxy(unsigned char x , unsigned char y )
{
	unsigned char position = 0x80;
	 
	switch(y)
 672:	61 30       	cpi	r22, 0x01	; 1
 674:	41 f0       	breq	.+16     	; 0x686 <lcd_gotoxy+0x14>
 676:	28 f0       	brcs	.+10     	; 0x682 <lcd_gotoxy+0x10>
 678:	62 30       	cpi	r22, 0x02	; 2
 67a:	39 f0       	breq	.+14     	; 0x68a <lcd_gotoxy+0x18>
 67c:	63 30       	cpi	r22, 0x03	; 3
 67e:	39 f0       	breq	.+14     	; 0x68e <lcd_gotoxy+0x1c>
 680:	08 c0       	rjmp	.+16     	; 0x692 <lcd_gotoxy+0x20>
	{
		case 0:

			position=position+x;
 682:	80 58       	subi	r24, 0x80	; 128
					
		break;
 684:	07 c0       	rjmp	.+14     	; 0x694 <lcd_gotoxy+0x22>

		case 1:

			position=0xc0;
			position=position+x;
 686:	80 54       	subi	r24, 0x40	; 64

		break;
 688:	05 c0       	rjmp	.+10     	; 0x694 <lcd_gotoxy+0x22>

		case 2:

			position=position+x;
 68a:	80 58       	subi	r24, 0x80	; 128

		break;
 68c:	03 c0       	rjmp	.+6      	; 0x694 <lcd_gotoxy+0x22>

		case 3:
			position=position+x;
 68e:	80 58       	subi	r24, 0x80	; 128
		break;
 690:	01 c0       	rjmp	.+2      	; 0x694 <lcd_gotoxy+0x22>

}

void lcd_gotoxy(unsigned char x , unsigned char y )
{
	unsigned char position = 0x80;
 692:	80 e8       	ldi	r24, 0x80	; 128
		break;
	
	
	}
	
	lcd_sendCommand(position); 	
 694:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>
 698:	08 95       	ret

0000069a <lcd_clrScreen>:


void lcd_clrScreen(void)
{

	lcd_sendCommand(0x01);
 69a:	81 e0       	ldi	r24, 0x01	; 1
 69c:	0e 94 9f 02 	call	0x53e	; 0x53e <lcd_sendCommand>
 6a0:	08 95       	ret

000006a2 <lcd_dispString>:

}


void lcd_dispString(char * ptr)
{
 6a2:	cf 93       	push	r28
 6a4:	df 93       	push	r29
 6a6:	ec 01       	movw	r28, r24

	while(* ptr!= '\0')
 6a8:	88 81       	ld	r24, Y
 6aa:	88 23       	and	r24, r24
 6ac:	31 f0       	breq	.+12     	; 0x6ba <lcd_dispString+0x18>
 6ae:	21 96       	adiw	r28, 0x01	; 1
	{
		lcd_displayChar(* ptr);
 6b0:	0e 94 fe 02 	call	0x5fc	; 0x5fc <lcd_displayChar>


void lcd_dispString(char * ptr)
{

	while(* ptr!= '\0')
 6b4:	89 91       	ld	r24, Y+
 6b6:	81 11       	cpse	r24, r1
 6b8:	fb cf       	rjmp	.-10     	; 0x6b0 <lcd_dispString+0xe>
	
	}



}
 6ba:	df 91       	pop	r29
 6bc:	cf 91       	pop	r28
 6be:	08 95       	ret

000006c0 <main>:

#define WAIT while(Btn_Read(BTN_NXT)==BTN_INACTIVE)

int main(void)
{
	BTN_Init();
 6c0:	0e 94 49 00 	call	0x92	; 0x92 <BTN_Init>
	lcd_init();
 6c4:	0e 94 da 02 	call	0x5b4	; 0x5b4 <lcd_init>
	Keypad_Init();
 6c8:	0e 94 c3 01 	call	0x386	; 0x386 <Keypad_Init>
	DIO_InitPortDirection(PD,0xFF,0xFE);
 6cc:	4e ef       	ldi	r20, 0xFE	; 254
 6ce:	6f ef       	ldi	r22, 0xFF	; 255
 6d0:	83 e0       	ldi	r24, 0x03	; 3
 6d2:	0e 94 87 00 	call	0x10e	; 0x10e <DIO_InitPortDirection>
 6d6:	c0 e0       	ldi	r28, 0x00	; 0
 6d8:	d0 e0       	ldi	r29, 0x00	; 0
	int sramNum = 0 ;
	
    while(1)
    {
		srand(sramNum++) ;
		QuesIndex = (rand()%QUESTIONS_NUMBER)+1 ;
 6da:	0f 2e       	mov	r0, r31
 6dc:	f6 e1       	ldi	r31, 0x16	; 22
 6de:	ef 2e       	mov	r14, r31
 6e0:	f1 2c       	mov	r15, r1
 6e2:	f0 2d       	mov	r31, r0
		lcd_clrScreen();
		WAIT
			Display_welcome("Pixels");    
			
		lcd_clrScreen();
		lcd_dispString(QuestionList[QuesIndex].ques);
 6e4:	0f 2e       	mov	r0, r31
 6e6:	fd e0       	ldi	r31, 0x0D	; 13
 6e8:	df 2e       	mov	r13, r31
 6ea:	f0 2d       	mov	r31, r0
	int usrAns = 0;
	int sramNum = 0 ;
	
    while(1)
    {
		srand(sramNum++) ;
 6ec:	ce 01       	movw	r24, r28
 6ee:	0e 94 6f 04 	call	0x8de	; 0x8de <srand>
		QuesIndex = (rand()%QUESTIONS_NUMBER)+1 ;
 6f2:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <rand>
 6f6:	b7 01       	movw	r22, r14
 6f8:	0e 94 f4 03 	call	0x7e8	; 0x7e8 <__divmodhi4>
 6fc:	01 e0       	ldi	r16, 0x01	; 1
 6fe:	08 0f       	add	r16, r24
		DIO_WritePort(PD , 0x00 , 0xFE) ;
 700:	4e ef       	ldi	r20, 0xFE	; 254
 702:	60 e0       	ldi	r22, 0x00	; 0
 704:	83 e0       	ldi	r24, 0x03	; 3
 706:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
		lcd_clrScreen();
 70a:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
		WAIT
 70e:	04 c0       	rjmp	.+8      	; 0x718 <main+0x58>
			Display_welcome("Pixels");    
 710:	86 e9       	ldi	r24, 0x96	; 150
 712:	91 e0       	ldi	r25, 0x01	; 1
 714:	0e 94 fc 00 	call	0x1f8	; 0x1f8 <Display_welcome>
    {
		srand(sramNum++) ;
		QuesIndex = (rand()%QUESTIONS_NUMBER)+1 ;
		DIO_WritePort(PD , 0x00 , 0xFE) ;
		lcd_clrScreen();
		WAIT
 718:	80 e0       	ldi	r24, 0x00	; 0
 71a:	0e 94 53 00 	call	0xa6	; 0xa6 <Btn_Read>
 71e:	81 30       	cpi	r24, 0x01	; 1
 720:	b9 f3       	breq	.-18     	; 0x710 <main+0x50>
			Display_welcome("Pixels");    
			
		lcd_clrScreen();
 722:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
		lcd_dispString(QuestionList[QuesIndex].ques);
 726:	10 e0       	ldi	r17, 0x00	; 0
 728:	d0 9e       	mul	r13, r16
 72a:	c0 01       	movw	r24, r0
 72c:	d1 9e       	mul	r13, r17
 72e:	90 0d       	add	r25, r0
 730:	11 24       	eor	r1, r1
 732:	88 58       	subi	r24, 0x88	; 136
 734:	9f 4f       	sbci	r25, 0xFF	; 255
 736:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 73a:	2f ef       	ldi	r18, 0xFF	; 255
 73c:	89 e6       	ldi	r24, 0x69	; 105
 73e:	98 e1       	ldi	r25, 0x18	; 24
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <main+0x80>
 748:	00 c0       	rjmp	.+0      	; 0x74a <main+0x8a>
 74a:	00 00       	nop
		_delay_ms(1000) ;
		WAIT ;
 74c:	80 e0       	ldi	r24, 0x00	; 0
 74e:	0e 94 53 00 	call	0xa6	; 0xa6 <Btn_Read>
 752:	81 30       	cpi	r24, 0x01	; 1
 754:	d9 f3       	breq	.-10     	; 0x74c <main+0x8c>
		lcd_clrScreen();
 756:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
		lcd_dispString("Your Answer :") ;
 75a:	8d e9       	ldi	r24, 0x9D	; 157
 75c:	91 e0       	ldi	r25, 0x01	; 1
 75e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
		usrAns = Display_getAns();
 762:	0e 94 55 01 	call	0x2aa	; 0x2aa <Display_getAns>
		if(usrAns == QuestionList[QuesIndex].ans)
 766:	d0 9e       	mul	r13, r16
 768:	f0 01       	movw	r30, r0
 76a:	d1 9e       	mul	r13, r17
 76c:	f0 0d       	add	r31, r0
 76e:	11 24       	eor	r1, r1
 770:	e8 58       	subi	r30, 0x88	; 136
 772:	ff 4f       	sbci	r31, 0xFF	; 255
 774:	23 85       	ldd	r18, Z+11	; 0x0b
 776:	34 85       	ldd	r19, Z+12	; 0x0c
 778:	28 17       	cp	r18, r24
 77a:	39 07       	cpc	r19, r25
 77c:	a9 f4       	brne	.+42     	; 0x7a8 <main+0xe8>
		{
			lcd_clrScreen();
 77e:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
			lcd_dispString("correct!");
 782:	8b ea       	ldi	r24, 0xAB	; 171
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
			DIO_WritePort(PD ,0xFF ,0x08) ;  //relay
 78a:	48 e0       	ldi	r20, 0x08	; 8
 78c:	6f ef       	ldi	r22, 0xFF	; 255
 78e:	83 e0       	ldi	r24, 0x03	; 3
 790:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
 794:	2f ef       	ldi	r18, 0xFF	; 255
 796:	89 e6       	ldi	r24, 0x69	; 105
 798:	98 e1       	ldi	r25, 0x18	; 24
 79a:	21 50       	subi	r18, 0x01	; 1
 79c:	80 40       	sbci	r24, 0x00	; 0
 79e:	90 40       	sbci	r25, 0x00	; 0
 7a0:	e1 f7       	brne	.-8      	; 0x79a <main+0xda>
 7a2:	00 c0       	rjmp	.+0      	; 0x7a4 <main+0xe4>
 7a4:	00 00       	nop
 7a6:	19 c0       	rjmp	.+50     	; 0x7da <main+0x11a>
			//pin 3
			_delay_ms(1000) ;
		}
		else
		{
			lcd_clrScreen();
 7a8:	0e 94 4d 03 	call	0x69a	; 0x69a <lcd_clrScreen>
			lcd_dispString("Wrong !") ;
 7ac:	84 eb       	ldi	r24, 0xB4	; 180
 7ae:	91 e0       	ldi	r25, 0x01	; 1
 7b0:	0e 94 51 03 	call	0x6a2	; 0x6a2 <lcd_dispString>
			DIO_WritePort(PD,0xFF , 0x10) ;    //buzzer
 7b4:	40 e1       	ldi	r20, 0x10	; 16
 7b6:	6f ef       	ldi	r22, 0xFF	; 255
 7b8:	83 e0       	ldi	r24, 0x03	; 3
 7ba:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
			DIO_WritePort(PD, 0xFF , 0x20) ;
 7be:	40 e2       	ldi	r20, 0x20	; 32
 7c0:	6f ef       	ldi	r22, 0xFF	; 255
 7c2:	83 e0       	ldi	r24, 0x03	; 3
 7c4:	0e 94 b7 00 	call	0x16e	; 0x16e <DIO_WritePort>
 7c8:	2f ef       	ldi	r18, 0xFF	; 255
 7ca:	89 e6       	ldi	r24, 0x69	; 105
 7cc:	98 e1       	ldi	r25, 0x18	; 24
 7ce:	21 50       	subi	r18, 0x01	; 1
 7d0:	80 40       	sbci	r24, 0x00	; 0
 7d2:	90 40       	sbci	r25, 0x00	; 0
 7d4:	e1 f7       	brne	.-8      	; 0x7ce <main+0x10e>
 7d6:	00 c0       	rjmp	.+0      	; 0x7d8 <main+0x118>
 7d8:	00 00       	nop
			//pins 4 & 5
			_delay_ms(1000) ;
		}
		WAIT ;
 7da:	80 e0       	ldi	r24, 0x00	; 0
 7dc:	0e 94 53 00 	call	0xa6	; 0xa6 <Btn_Read>
 7e0:	81 30       	cpi	r24, 0x01	; 1
 7e2:	d9 f3       	breq	.-10     	; 0x7da <main+0x11a>
 7e4:	21 96       	adiw	r28, 0x01	; 1
 7e6:	82 cf       	rjmp	.-252    	; 0x6ec <main+0x2c>

000007e8 <__divmodhi4>:
 7e8:	97 fb       	bst	r25, 7
 7ea:	07 2e       	mov	r0, r23
 7ec:	16 f4       	brtc	.+4      	; 0x7f2 <__divmodhi4+0xa>
 7ee:	00 94       	com	r0
 7f0:	07 d0       	rcall	.+14     	; 0x800 <__divmodhi4_neg1>
 7f2:	77 fd       	sbrc	r23, 7
 7f4:	09 d0       	rcall	.+18     	; 0x808 <__divmodhi4_neg2>
 7f6:	0e 94 08 04 	call	0x810	; 0x810 <__udivmodhi4>
 7fa:	07 fc       	sbrc	r0, 7
 7fc:	05 d0       	rcall	.+10     	; 0x808 <__divmodhi4_neg2>
 7fe:	3e f4       	brtc	.+14     	; 0x80e <__divmodhi4_exit>

00000800 <__divmodhi4_neg1>:
 800:	90 95       	com	r25
 802:	81 95       	neg	r24
 804:	9f 4f       	sbci	r25, 0xFF	; 255
 806:	08 95       	ret

00000808 <__divmodhi4_neg2>:
 808:	70 95       	com	r23
 80a:	61 95       	neg	r22
 80c:	7f 4f       	sbci	r23, 0xFF	; 255

0000080e <__divmodhi4_exit>:
 80e:	08 95       	ret

00000810 <__udivmodhi4>:
 810:	aa 1b       	sub	r26, r26
 812:	bb 1b       	sub	r27, r27
 814:	51 e1       	ldi	r21, 0x11	; 17
 816:	07 c0       	rjmp	.+14     	; 0x826 <__udivmodhi4_ep>

00000818 <__udivmodhi4_loop>:
 818:	aa 1f       	adc	r26, r26
 81a:	bb 1f       	adc	r27, r27
 81c:	a6 17       	cp	r26, r22
 81e:	b7 07       	cpc	r27, r23
 820:	10 f0       	brcs	.+4      	; 0x826 <__udivmodhi4_ep>
 822:	a6 1b       	sub	r26, r22
 824:	b7 0b       	sbc	r27, r23

00000826 <__udivmodhi4_ep>:
 826:	88 1f       	adc	r24, r24
 828:	99 1f       	adc	r25, r25
 82a:	5a 95       	dec	r21
 82c:	a9 f7       	brne	.-22     	; 0x818 <__udivmodhi4_loop>
 82e:	80 95       	com	r24
 830:	90 95       	com	r25
 832:	bc 01       	movw	r22, r24
 834:	cd 01       	movw	r24, r26
 836:	08 95       	ret

00000838 <do_rand>:
 838:	8f 92       	push	r8
 83a:	9f 92       	push	r9
 83c:	af 92       	push	r10
 83e:	bf 92       	push	r11
 840:	cf 92       	push	r12
 842:	df 92       	push	r13
 844:	ef 92       	push	r14
 846:	ff 92       	push	r15
 848:	cf 93       	push	r28
 84a:	df 93       	push	r29
 84c:	ec 01       	movw	r28, r24
 84e:	68 81       	ld	r22, Y
 850:	79 81       	ldd	r23, Y+1	; 0x01
 852:	8a 81       	ldd	r24, Y+2	; 0x02
 854:	9b 81       	ldd	r25, Y+3	; 0x03
 856:	61 15       	cp	r22, r1
 858:	71 05       	cpc	r23, r1
 85a:	81 05       	cpc	r24, r1
 85c:	91 05       	cpc	r25, r1
 85e:	21 f4       	brne	.+8      	; 0x868 <__stack+0x9>
 860:	64 e2       	ldi	r22, 0x24	; 36
 862:	79 ed       	ldi	r23, 0xD9	; 217
 864:	8b e5       	ldi	r24, 0x5B	; 91
 866:	97 e0       	ldi	r25, 0x07	; 7
 868:	2d e1       	ldi	r18, 0x1D	; 29
 86a:	33 ef       	ldi	r19, 0xF3	; 243
 86c:	41 e0       	ldi	r20, 0x01	; 1
 86e:	50 e0       	ldi	r21, 0x00	; 0
 870:	0e 94 a0 04 	call	0x940	; 0x940 <__divmodsi4>
 874:	49 01       	movw	r8, r18
 876:	5a 01       	movw	r10, r20
 878:	9b 01       	movw	r18, r22
 87a:	ac 01       	movw	r20, r24
 87c:	a7 ea       	ldi	r26, 0xA7	; 167
 87e:	b1 e4       	ldi	r27, 0x41	; 65
 880:	0e 94 bf 04 	call	0x97e	; 0x97e <__muluhisi3>
 884:	6b 01       	movw	r12, r22
 886:	7c 01       	movw	r14, r24
 888:	ac ee       	ldi	r26, 0xEC	; 236
 88a:	b4 ef       	ldi	r27, 0xF4	; 244
 88c:	a5 01       	movw	r20, r10
 88e:	94 01       	movw	r18, r8
 890:	0e 94 cd 04 	call	0x99a	; 0x99a <__mulohisi3>
 894:	c6 0e       	add	r12, r22
 896:	d7 1e       	adc	r13, r23
 898:	e8 1e       	adc	r14, r24
 89a:	f9 1e       	adc	r15, r25
 89c:	f7 fe       	sbrs	r15, 7
 89e:	06 c0       	rjmp	.+12     	; 0x8ac <__stack+0x4d>
 8a0:	81 e0       	ldi	r24, 0x01	; 1
 8a2:	c8 1a       	sub	r12, r24
 8a4:	d1 08       	sbc	r13, r1
 8a6:	e1 08       	sbc	r14, r1
 8a8:	80 e8       	ldi	r24, 0x80	; 128
 8aa:	f8 0a       	sbc	r15, r24
 8ac:	c8 82       	st	Y, r12
 8ae:	d9 82       	std	Y+1, r13	; 0x01
 8b0:	ea 82       	std	Y+2, r14	; 0x02
 8b2:	fb 82       	std	Y+3, r15	; 0x03
 8b4:	c6 01       	movw	r24, r12
 8b6:	9f 77       	andi	r25, 0x7F	; 127
 8b8:	df 91       	pop	r29
 8ba:	cf 91       	pop	r28
 8bc:	ff 90       	pop	r15
 8be:	ef 90       	pop	r14
 8c0:	df 90       	pop	r13
 8c2:	cf 90       	pop	r12
 8c4:	bf 90       	pop	r11
 8c6:	af 90       	pop	r10
 8c8:	9f 90       	pop	r9
 8ca:	8f 90       	pop	r8
 8cc:	08 95       	ret

000008ce <rand_r>:
 8ce:	0e 94 1c 04 	call	0x838	; 0x838 <do_rand>
 8d2:	08 95       	ret

000008d4 <rand>:
 8d4:	80 e6       	ldi	r24, 0x60	; 96
 8d6:	90 e0       	ldi	r25, 0x00	; 0
 8d8:	0e 94 1c 04 	call	0x838	; 0x838 <do_rand>
 8dc:	08 95       	ret

000008de <srand>:
 8de:	a0 e0       	ldi	r26, 0x00	; 0
 8e0:	b0 e0       	ldi	r27, 0x00	; 0
 8e2:	80 93 60 00 	sts	0x0060, r24
 8e6:	90 93 61 00 	sts	0x0061, r25
 8ea:	a0 93 62 00 	sts	0x0062, r26
 8ee:	b0 93 63 00 	sts	0x0063, r27
 8f2:	08 95       	ret

000008f4 <atoi>:
 8f4:	fc 01       	movw	r30, r24
 8f6:	88 27       	eor	r24, r24
 8f8:	99 27       	eor	r25, r25
 8fa:	e8 94       	clt
 8fc:	21 91       	ld	r18, Z+
 8fe:	20 32       	cpi	r18, 0x20	; 32
 900:	e9 f3       	breq	.-6      	; 0x8fc <atoi+0x8>
 902:	29 30       	cpi	r18, 0x09	; 9
 904:	10 f0       	brcs	.+4      	; 0x90a <atoi+0x16>
 906:	2e 30       	cpi	r18, 0x0E	; 14
 908:	c8 f3       	brcs	.-14     	; 0x8fc <atoi+0x8>
 90a:	2b 32       	cpi	r18, 0x2B	; 43
 90c:	41 f0       	breq	.+16     	; 0x91e <atoi+0x2a>
 90e:	2d 32       	cpi	r18, 0x2D	; 45
 910:	39 f4       	brne	.+14     	; 0x920 <atoi+0x2c>
 912:	68 94       	set
 914:	04 c0       	rjmp	.+8      	; 0x91e <atoi+0x2a>
 916:	0e 94 98 04 	call	0x930	; 0x930 <__mulhi_const_10>
 91a:	82 0f       	add	r24, r18
 91c:	91 1d       	adc	r25, r1
 91e:	21 91       	ld	r18, Z+
 920:	20 53       	subi	r18, 0x30	; 48
 922:	2a 30       	cpi	r18, 0x0A	; 10
 924:	c0 f3       	brcs	.-16     	; 0x916 <atoi+0x22>
 926:	1e f4       	brtc	.+6      	; 0x92e <atoi+0x3a>
 928:	90 95       	com	r25
 92a:	81 95       	neg	r24
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	08 95       	ret

00000930 <__mulhi_const_10>:
 930:	7a e0       	ldi	r23, 0x0A	; 10
 932:	97 9f       	mul	r25, r23
 934:	90 2d       	mov	r25, r0
 936:	87 9f       	mul	r24, r23
 938:	80 2d       	mov	r24, r0
 93a:	91 0d       	add	r25, r1
 93c:	11 24       	eor	r1, r1
 93e:	08 95       	ret

00000940 <__divmodsi4>:
 940:	05 2e       	mov	r0, r21
 942:	97 fb       	bst	r25, 7
 944:	1e f4       	brtc	.+6      	; 0x94c <__divmodsi4+0xc>
 946:	00 94       	com	r0
 948:	0e 94 b7 04 	call	0x96e	; 0x96e <__negsi2>
 94c:	57 fd       	sbrc	r21, 7
 94e:	07 d0       	rcall	.+14     	; 0x95e <__divmodsi4_neg2>
 950:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__udivmodsi4>
 954:	07 fc       	sbrc	r0, 7
 956:	03 d0       	rcall	.+6      	; 0x95e <__divmodsi4_neg2>
 958:	4e f4       	brtc	.+18     	; 0x96c <__divmodsi4_exit>
 95a:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__negsi2>

0000095e <__divmodsi4_neg2>:
 95e:	50 95       	com	r21
 960:	40 95       	com	r20
 962:	30 95       	com	r19
 964:	21 95       	neg	r18
 966:	3f 4f       	sbci	r19, 0xFF	; 255
 968:	4f 4f       	sbci	r20, 0xFF	; 255
 96a:	5f 4f       	sbci	r21, 0xFF	; 255

0000096c <__divmodsi4_exit>:
 96c:	08 95       	ret

0000096e <__negsi2>:
 96e:	90 95       	com	r25
 970:	80 95       	com	r24
 972:	70 95       	com	r23
 974:	61 95       	neg	r22
 976:	7f 4f       	sbci	r23, 0xFF	; 255
 978:	8f 4f       	sbci	r24, 0xFF	; 255
 97a:	9f 4f       	sbci	r25, 0xFF	; 255
 97c:	08 95       	ret

0000097e <__muluhisi3>:
 97e:	0e 94 f4 04 	call	0x9e8	; 0x9e8 <__umulhisi3>
 982:	a5 9f       	mul	r26, r21
 984:	90 0d       	add	r25, r0
 986:	b4 9f       	mul	r27, r20
 988:	90 0d       	add	r25, r0
 98a:	a4 9f       	mul	r26, r20
 98c:	80 0d       	add	r24, r0
 98e:	91 1d       	adc	r25, r1
 990:	11 24       	eor	r1, r1
 992:	08 95       	ret

00000994 <__mulshisi3>:
 994:	b7 ff       	sbrs	r27, 7
 996:	0c 94 bf 04 	jmp	0x97e	; 0x97e <__muluhisi3>

0000099a <__mulohisi3>:
 99a:	0e 94 bf 04 	call	0x97e	; 0x97e <__muluhisi3>
 99e:	82 1b       	sub	r24, r18
 9a0:	93 0b       	sbc	r25, r19
 9a2:	08 95       	ret

000009a4 <__udivmodsi4>:
 9a4:	a1 e2       	ldi	r26, 0x21	; 33
 9a6:	1a 2e       	mov	r1, r26
 9a8:	aa 1b       	sub	r26, r26
 9aa:	bb 1b       	sub	r27, r27
 9ac:	fd 01       	movw	r30, r26
 9ae:	0d c0       	rjmp	.+26     	; 0x9ca <__udivmodsi4_ep>

000009b0 <__udivmodsi4_loop>:
 9b0:	aa 1f       	adc	r26, r26
 9b2:	bb 1f       	adc	r27, r27
 9b4:	ee 1f       	adc	r30, r30
 9b6:	ff 1f       	adc	r31, r31
 9b8:	a2 17       	cp	r26, r18
 9ba:	b3 07       	cpc	r27, r19
 9bc:	e4 07       	cpc	r30, r20
 9be:	f5 07       	cpc	r31, r21
 9c0:	20 f0       	brcs	.+8      	; 0x9ca <__udivmodsi4_ep>
 9c2:	a2 1b       	sub	r26, r18
 9c4:	b3 0b       	sbc	r27, r19
 9c6:	e4 0b       	sbc	r30, r20
 9c8:	f5 0b       	sbc	r31, r21

000009ca <__udivmodsi4_ep>:
 9ca:	66 1f       	adc	r22, r22
 9cc:	77 1f       	adc	r23, r23
 9ce:	88 1f       	adc	r24, r24
 9d0:	99 1f       	adc	r25, r25
 9d2:	1a 94       	dec	r1
 9d4:	69 f7       	brne	.-38     	; 0x9b0 <__udivmodsi4_loop>
 9d6:	60 95       	com	r22
 9d8:	70 95       	com	r23
 9da:	80 95       	com	r24
 9dc:	90 95       	com	r25
 9de:	9b 01       	movw	r18, r22
 9e0:	ac 01       	movw	r20, r24
 9e2:	bd 01       	movw	r22, r26
 9e4:	cf 01       	movw	r24, r30
 9e6:	08 95       	ret

000009e8 <__umulhisi3>:
 9e8:	a2 9f       	mul	r26, r18
 9ea:	b0 01       	movw	r22, r0
 9ec:	b3 9f       	mul	r27, r19
 9ee:	c0 01       	movw	r24, r0
 9f0:	a3 9f       	mul	r26, r19
 9f2:	70 0d       	add	r23, r0
 9f4:	81 1d       	adc	r24, r1
 9f6:	11 24       	eor	r1, r1
 9f8:	91 1d       	adc	r25, r1
 9fa:	b2 9f       	mul	r27, r18
 9fc:	70 0d       	add	r23, r0
 9fe:	81 1d       	adc	r24, r1
 a00:	11 24       	eor	r1, r1
 a02:	91 1d       	adc	r25, r1
 a04:	08 95       	ret

00000a06 <_exit>:
 a06:	f8 94       	cli

00000a08 <__stop_program>:
 a08:	ff cf       	rjmp	.-2      	; 0xa08 <__stop_program>
